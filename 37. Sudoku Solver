class Solution {
public:
    vector<vector<int>> box = {{0, 1}, {0, 2}, {1, 0}, {1, 1},
                               {1, 2}, {2, 1}, {2, 2}, {2, 3}};

    bool isSafe(vector<vector<char>>& board, int row, int col, int num) {
        char ch = num + '0';

        for (int i = 0; i < 9; i++) {
            if (board[row][i] == ch || board[i][col] == ch)
                return false;
        }

        int startRow = row - row % 3;
        int startCol = col - col % 3;

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[startRow + i][startCol + j] == ch)
                    return false;
            }
        }

        return true;
    }

    bool solver(vector<vector<char>>& board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    for (int k = 1; k <= 9; k++) {
                        if (isSafe(board, i, j, k)) {
                            board[i][j] = k + '0';
                            if (solver(board))
                                return true;
                            board[i][j] = '.'; 
                        }
                    }
                    return false; 
                }
            }
        }
        return true;
    }

    void solveSudoku(vector<vector<char>>& board) {
        solver(board);
    }
};
