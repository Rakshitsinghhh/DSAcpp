class Solution {
public:
    bool helper(vector<double> num) {
        if (num.size() == 1) {
            return fabs(num[0] - 24.0) < 0.000001; // ✅ return the check
        }

        for (int i = 0; i < num.size(); i++) {
            for (int j = i + 1; j < num.size(); j++) {
                double a = num[i];
                double b = num[j];

                // Generate possible results of combining a and b
                vector<double> operations = opcall(a, b);

                for (auto &ele : operations) {
                    vector<double> nextRound;

                    // add remaining numbers except i and j
                    for (int k = 0; k < num.size(); k++) {
                        if (k != i && k != j) {
                            nextRound.push_back(num[k]);
                        }
                    }

                    // add the new operation result
                    nextRound.push_back(ele);

                    // recursive call
                    if (helper(nextRound)) {
                        return true;
                    }
                }
            }
        }
        return false; // ✅ Only return false if no path worked
    }

    vector<double> opcall(double a, double b) {
        vector<double> result;
        result.push_back(a + b);
        result.push_back(a - b);
        result.push_back(b - a);
        result.push_back(a * b);
        if (fabs(b) > 1e-6) result.push_back(a / b);
        if (fabs(a) > 1e-6) result.push_back(b / a);
        return result;
    }

    bool judgePoint24(vector<int> &cards) {
        vector<double> nums;
        for (auto &ele : cards) {
            nums.push_back(static_cast<double>(ele));
        }
        return helper(nums);
    }
};
