/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minimumOperations(TreeNode* root) {
        if (!root)
            return 0;

        vector<vector<int>> table;
        queue<TreeNode*> q; 
        int count = 0;

        q.push(root);
        q.push(nullptr); 
        vector<int> small;

        while (!q.empty()) {
            TreeNode* temp = q.front();
            q.pop();

            if (temp == nullptr) {
                table.push_back(small);
                small.clear();

                if (!q.empty()) {
                    q.push(nullptr); 
                }
            } else {
                small.push_back(temp->val); 
                if (temp->left) {
                    q.push(temp->left);
                }
                if (temp->right) { 
                    q.push(temp->right);
                }
            }
        }

        for (auto& ele : table) { 
            for (int i = 0; i < ele.size(); i++) {
                int minIndex = i;
                for (int j = i + 1; j < ele.size(); j++) {
                    if (ele[j] < ele[minIndex]) { 
                        minIndex = j;
                    }
                }
                if (minIndex != i) { 
                    swap(ele[i], ele[minIndex]); 
                    count++;
                }
            }
        }
        return count;
    }
};
