#include <iomanip>
#include <queue>
#include <utility>
#include <vector>
using namespace std;

class Solution {
public:
    double passRatioGain(int pass, int total) {
        return (double)(pass + 1) / (total + 1) - (double)pass / total;
    }

    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {

        auto cmp = [](pair<double, pair<int, int>>& a,
                      pair<double, pair<int, int>>& b) {
            return a.first < b.first; // Max-heap
        };
        priority_queue<pair<double, pair<int, int>>,
                       vector<pair<double, pair<int, int>>>, decltype(cmp)>
            maxHeap(cmp);

        for (auto& cls : classes) {
            int pass = cls[0], total = cls[1];
            maxHeap.push({passRatioGain(pass, total), {pass, total}});
        }

        while (extraStudents--) {
            auto top = maxHeap.top();
            maxHeap.pop();
            int pass = top.second.first, total = top.second.second;

            pass++;
            total++;
            maxHeap.push({passRatioGain(pass, total), {pass, total}});
        }

        double totalRatio = 0.0;
        while (!maxHeap.empty()) {
            auto top = maxHeap.top();
            maxHeap.pop();
            int pass = top.second.first, total = top.second.second;
            totalRatio += (double)pass / total;
        }

        return totalRatio / classes.size();
    }
};
