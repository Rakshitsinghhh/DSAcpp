class Solution {
  public:
    int minimumCoins(vector<int>& arr, int k) {
        int n = arr.size();
        sort(arr.begin(), arr.end());

        // Prefix sum
        vector<long long> prefix(n + 1, 0);
        for (int i = 0; i < n; ++i)
            prefix[i + 1] = prefix[i] + arr[i];

        // Suffix sum of coin reductions needed if we reduce everything > x to x
        vector<long long> suffix(n + 1, 0); // suffix[i] = sum from i to end
        for (int i = n - 1; i >= 0; --i) {
            suffix[i] = suffix[i + 1] + arr[i];
        }

        long long res = LLONG_MAX;

        for (int i = 0; i < n; ++i) {
            int minVal = arr[i];
            int maxVal = minVal + k;

            // Find first index where arr[j] > maxVal
            int upper = upper_bound(arr.begin(), arr.end(), maxVal) - arr.begin();

            long long leftRemove = prefix[i]; // remove all less than arr[i]
            long long rightReduce = suffix[upper] - 1LL * (n - upper) * maxVal;

            res = min(res, leftRemove + rightReduce);
        }

        return (int)res;
    }
};
