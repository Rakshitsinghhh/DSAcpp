class Solution {
    private:
    int bfs(int row,int col,vector<vector<int>> &vis,vector<vector<int>> &grid)
    {
        int n=grid.size();
        int m=grid[0].size();

        int count=0;
        queue<pair<int,int>> q;
        q.push({row,col});
        vis[row][col]=1;

        vector<vector<int>> direction={{-1,0},{0,1},{1,0},{0,-1}};


        while(!q.empty())
        {
            int crow=q.front().first;
            int ccol=q.front().second;

            q.pop();
            count++;
            for(auto& dir : direction)
            {
                int frow=crow+dir[0];
                int fcol=ccol+dir[1];

                if(frow>=0 && fcol >=0 && frow<n && fcol<m && !vis[frow][fcol] && grid[frow][fcol]==1)
                {
                    vis[frow][fcol]=1;
                    q.push({frow,fcol});
                }

            }
        }
        return count;
    }
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        
        vector<vector<int>> vis(n,vector<int>(m,0));
        int ans=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!vis[i][j] && grid[i][j]==1)
                {
                    ans = max(ans, bfs(i, j, vis, grid));
                }
            }
        }
        return ans;
    }
};
