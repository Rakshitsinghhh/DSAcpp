/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        if (!root) return {}; 

        vector<vector<int>> list;    
        queue<TreeNode*> q;          
        q.push(root);
        q.push(nullptr);             
        vector<int> small;           
        vector<int> gg;              

        while (!q.empty()) {
            TreeNode* temp = q.front();
            q.pop();

            if (temp == nullptr) {
                list.push_back(small);
                small.clear();
                if (!q.empty()) {
                    q.push(nullptr);
                }
            } else {
                small.push_back(temp->val); 
                if (temp->left) {
                    q.push(temp->left);
                }
                if (temp->right) {
                    q.push(temp->right);
                }
            }
        }

        for (auto& ele : list) {
            int mx = INT_MIN; 
            for (auto& ele1 : ele) {
                mx = max(mx, ele1);
            }
            gg.push_back(mx);
        }

        return gg;
    }
};
