/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxLevelSum(TreeNode* root) {
        if (!root) return 0;

        vector<int> final;  
        vector<vector<int>> all;  
        queue<TreeNode*> q;

        q.push(root);
        q.push(nullptr);  

        while (!q.empty()) {
            TreeNode* temp = q.front();
            q.pop();

            if (temp == nullptr) {
                all.push_back(final);
                final.clear();
                if (!q.empty()) {
                    q.push(nullptr);  
                }
            } else {
                final.push_back(temp->val);  

                if (temp->left) {
                    q.push(temp->left);  
                }

                if (temp->right) {
                    q.push(temp->right);  
                }
            }
        }

        int maxSum = INT_MIN, maxLevel = 0;
        for (int i = 0; i < all.size(); i++) {
            int levelSum = 0;
            for (int val : all[i]) {
                levelSum += val;
            }

            if (levelSum > maxSum) {
                maxSum = levelSum;
                maxLevel = i + 1;  
            }
        }

        return maxLevel;
    }
};
