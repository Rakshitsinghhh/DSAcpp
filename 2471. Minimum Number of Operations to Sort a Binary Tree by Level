/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    // Level-order traversal to collect values at each level
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> all;

        if (!root) return all;

        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            int size = q.size();
            vector<int> level;

            for (int i = 0; i < size; ++i) {
                TreeNode* node = q.front();
                q.pop();

                level.push_back(node->val);

                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }

            all.push_back(level);
        }

        return all;
    }

    // Count minimum swaps using selection sort
    int minSwapsToSort(vector<int> small) {
        int swaps = 0;
        int n = small.size();

        for (int i = 0; i < n - 1; ++i) {
            int minIndex = i;
            for (int j = i + 1; j < n; ++j) {
                if (small[j] < small[minIndex]) {
                    minIndex = j;
                }
            }
            if (minIndex != i) {
                swap(small[i], small[minIndex]);
                ++swaps;
            }
        }

        return swaps;
    }

    // Main function
    int minimumOperations(TreeNode* root) {
        vector<vector<int>> levels = levelOrder(root);
        int totalSwaps = 0;

        for (auto& level : levels) {
            totalSwaps += minSwapsToSort(level);
        }

        return totalSwaps;
    }
};
